"use strict";
(self["webpackChunkwebpackproject"] = self["webpackChunkwebpackproject"] || []).push([["getAndUpdateFirebaseData"],{

/***/ "./src/Admin_OrderListView/getAndUpdateFirebaseData.js":
/*!*************************************************************!*\
  !*** ./src/Admin_OrderListView/getAndUpdateFirebaseData.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Index_Page/fireStoreAccess.js */ "./src/Index_Page/fireStoreAccess.js");
/* harmony import */ var _orderListStyling_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orderListStyling.css */ "./src/Admin_OrderListView/orderListStyling.css");
/* harmony import */ var _Index_Page_addDataToLocalStorageFromFirebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Index_Page/addDataToLocalStorageFromFirebase */ "./src/Index_Page/addDataToLocalStorageFromFirebase.js");




window.onload = function () {
  //On Page Load make the Checkboxes true by default
  showOrdersList(); //Making the Parent CheckBox toggle between checked and unchecked based on
  //whether all the child checkboxes are checked or not

  setTimeout(function () {
    var tbodyQueue = document.getElementsByTagName("tbody");

    for (var key = 0; key < tbodyQueue.length; key++) {
      tbodyQueue[key].addEventListener("change", function (event) {
        if (event.target.parentElement.id) {
          var parentCheckBoxId = event.target.name + "CheckBox";

          if (event.target.checked == false) {
            document.getElementById(parentCheckBoxId).checked = false;
          } else {
            var flag = 0;
            var orders = document.getElementsByName(event.target.name);
            orders.forEach(function (order) {
              if (!order.id && flag != 1) {
                if (order.checked == true) flag = 0;else flag = 1;
              }
            });
            if (flag == 0) document.getElementById(parentCheckBoxId).checked = true;
          }
        }
      });
    }
  }, 3000);
};

function showOrdersList() {
  var inTheQueue = document.getElementById("inTheQueue");
  var beingMixed = document.getElementById("beingMixed");
  var readyToCollect = document.getElementById("readyToCollect");
  inTheQueue.checked = true;
  beingMixed.checked = true;
  readyToCollect.checked = true;
  handleData(inTheQueue)();
  handleData(beingMixed)();
  handleData(readyToCollect)();
}

var showCheckBoxes = toggleCheckBoxes();
document.getElementById("selectQueue").addEventListener("click", showCheckBoxes); //Toggles between showing and hiding the checkboxes

function toggleCheckBoxes() {
  var show = true;
  return function () {
    var checkBoxQueues = document.getElementById("checkBoxQueues");

    if (show) {
      checkBoxQueues.style.display = "block";
      show = false;
    } else {
      checkBoxQueues.style.display = "none";
      show = true;
    }
  };
} //Select all CheckBoxes of the respective queue by clicking one main CheckBox


function checkAll(checkbox) {
  return function () {
    if (checkbox.checked === true) {
      var queue = document.getElementsByName(checkbox.name);
      queue.forEach(function (element) {
        element.checked = true;
      });
    } else {
      var _queue = document.getElementsByName(checkbox.name);

      _queue.forEach(function (element) {
        element.checked = false;
      });
    }
  };
} //Get Data from Firebase and store it in your table


function handleData(checkbox) {
  return function () {
    var customersData = JSON.parse(localStorage.getItem("customersData"));
    var customerOrders = customersData[0];
    var orderQueue = customersData[1];
    var customerIDs = Object.keys(customerOrders); //If Checked 

    if (checkbox.checked == true) {
      //The Queue in which the data belong to
      var queue = checkbox.id; //Create a Row representing the Customer Data in particular Queue

      var customersQueueData = document.createElement("tbody");
      customersQueueData.id = queue + "Row";
      document.getElementById("ordersList").appendChild(customersQueueData); //Creating a table cell representing the Queue Name and a Checkbox

      var queueNameRow = document.createElement("tr");
      customersQueueData.appendChild(queueNameRow);
      var queueNameCell = document.createElement("td");
      queueNameRow.appendChild(queueNameCell);
      queueNameCell.colSpan = 4; //Label

      var queueNameLabel = document.createElement("LABEL");
      queueNameLabel.htmlFor = queue + "CheckBox";
      if (queue == "inTheQueue") queueNameLabel.innerHTML = "In The Queue ";else if (queue == "beingMixed") queueNameLabel.innerHTML = "Being Mixed ";else queueNameLabel.innerHTML = "Ready To Collect ";
      queueNameCell.appendChild(queueNameLabel); //CheckBox

      var queueNameCheckBox = document.createElement("input");
      queueNameCheckBox.type = "checkbox";
      queueNameCheckBox.name = queue;
      queueNameCheckBox.id = queue + "CheckBox";
      queueNameCheckBox.style.verticalAlign = "middle";
      var checkAllFunction = checkAll(queueNameCheckBox);
      queueNameCheckBox.addEventListener("change", checkAllFunction);
      queueNameCell.appendChild(queueNameCheckBox); //Create a Table Row for each Customer Order in a specific Queue

      customerIDs.forEach(function (id) {
        if (orderQueue[id] === checkbox.id) {
          //Get Cutomer Name and Order based on his ID
          var customerData = customerOrders[id];
          var customerDataArray = customerData.split("$");
          var customerName = customerDataArray[0];
          var beverage = customerDataArray[1]; //ROW

          var customerRow = document.createElement("tr");
          rowID = orderQueue[id] + "Row";
          document.getElementById(rowID).appendChild(customerRow); //ID

          var ID = document.createElement("td");
          ID.innerHTML = id;
          customerRow.appendChild(ID); //Name

          var name = document.createElement("td");
          name.innerHTML = customerName;
          customerRow.appendChild(name); //Beverage

          var drink = document.createElement("td");
          drink.innerHTML = beverage;
          customerRow.appendChild(drink); //CheckBox

          var selectData = document.createElement("td");
          selectData.id = id;
          customerRow.appendChild(selectData);
          var inputCheckBox = document.createElement("input");
          inputCheckBox.type = "checkbox";
          inputCheckBox.name = orderQueue[id];
          selectData.appendChild(inputCheckBox);
        }
      });
    } //If Unchecked
    else {
        var rowID = checkbox.id + "Row";
        var orders = document.getElementById(rowID);
        orders.remove();
        count = 0;
      }
  };
}

var inTheQueueFunction = handleData(document.getElementById("inTheQueue"));
var beingMixedFunction = handleData(document.getElementById("beingMixed"));
var readyToCollectFunction = handleData(document.getElementById("readyToCollect"));
document.getElementById("inTheQueue").addEventListener("change", inTheQueueFunction);
document.getElementById("beingMixed").addEventListener("change", beingMixedFunction);
document.getElementById("readyToCollect").addEventListener("change", readyToCollectFunction); // Shift all the checked orders to the selected Queue

function shiftToSelectedQueue() {
  _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").get().then(function (snapshot) {
    var doc = snapshot.docs[0];
    var docId = doc.id;
    var customersData = doc.data().customersData;
    var customerOrders = customersData[0];
    var orderQueue = customersData[1];
    var currentCustomersCount = doc.data().currentCustomersCount;
    var index = doc.data().index;
    var queueName = document.getElementById("shiftToQueue").value;
    var selectedOrders = document.querySelectorAll("input[type='checkbox']:checked");
    selectedOrders.forEach(function (element) {
      if (element.parentElement.id && queueName != "--Shift To Queue--") {
        var customerId = element.parentElement.id;
        customerId = parseInt(customerId);

        if (queueName != "deleteOrder") {
          //Update the customerId with new queueName
          delete orderQueue[customerId];
          orderQueue[index] = queueName; //Delete the customerData and update to new one

          var customerData = customerOrders[customerId];
          delete customerOrders[customerId];
          customerOrders[index] = customerData;
          localStorage.setItem("customersData", JSON.stringify(customersData)); //Update the index count in Firestore

          index++;
          localStorage.setItem("index", index);
          _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").doc(docId).update({
            customersData: customersData,
            index: index
          }).then(function () {
            location.reload();
          });
        } else {
          //Delete the customer's data from Firestore
          delete customerOrders[customerId];
          delete orderQueue[customerId];
          localStorage.setItem("customersData", JSON.stringify(customersData));
          currentCustomersCount--;
          localStorage.setItem("currentCustomersCount", currentCustomersCount);
          _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").doc(docId).update({
            customersData: customersData,
            currentCustomersCount: currentCustomersCount
          }).then(function () {
            location.reload();
          });
        }
      }
    });
  });
}

document.getElementById("updateLocalStorage").addEventListener("click", shiftToSelectedQueue);

/***/ }),

/***/ "./src/Index_Page/addDataToLocalStorageFromFirebase.js":
/*!*************************************************************!*\
  !*** ./src/Index_Page/addDataToLocalStorageFromFirebase.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Index_Page/fireStoreAccess.js */ "./src/Index_Page/fireStoreAccess.js");

_Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").get().then(function (snapshot) {
  var doc = snapshot.docs[0];
  var customersData = doc.data().customersData;
  var currentCustomersCount = doc.data().currentCustomersCount;
  var index = doc.data().index;
  addToLocalStorage(customersData, currentCustomersCount, index);

  function addToLocalStorage(customersData, currentCustomersCount, index) {
    localStorage.setItem("customersData", JSON.stringify(customersData));
    localStorage.setItem("index", index);
    localStorage.setItem("currentCustomersCount", currentCustomersCount);
  }
});

/***/ }),

/***/ "./src/Admin_OrderListView/orderListStyling.css":
/*!******************************************************!*\
  !*** ./src/Admin_OrderListView/orderListStyling.css ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_firebase_app_dist_index_esm_js-node_modules_firebase_firestore_dist_inde-439294","sharedFireStoreAccess"], () => (__webpack_exec__("./src/Admin_OrderListView/getAndUpdateFirebaseData.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDZmlCLFlBQUFBLFFBQVEsQ0FBQ0MsTUFBVDtBQUNILFdBTEQ7QUFNSDtBQUNKO0FBQ0osS0EzQ0Q7QUE0Q0gsR0F4REQ7QUF5REg7O0FBRUQ1RixRQUFRLENBQUNZLGNBQVQsQ0FBd0Isb0JBQXhCLEVBQThDUixnQkFBOUMsQ0FBK0QsT0FBL0QsRUFBd0VtRSxvQkFBeEU7Ozs7Ozs7Ozs7OztBQ3ZQQTtBQUNBN0Usb0VBQVEsQ0FBQzhFLFVBQVQsQ0FBb0IsV0FBcEIsRUFBaUNDLEdBQWpDLEdBQXVDQyxJQUF2QyxDQUE0QyxVQUFDQyxRQUFELEVBQWM7QUFDdEQsTUFBTUMsR0FBRyxHQUFHRCxRQUFRLENBQUNFLElBQVQsQ0FBYyxDQUFkLENBQVo7QUFDQSxNQUFJN0MsYUFBYSxHQUFHNEMsR0FBRyxDQUFDRyxJQUFKLEdBQVcvQyxhQUEvQjtBQUNBLE1BQUlnRCxxQkFBcUIsR0FBR0osR0FBRyxDQUFDRyxJQUFKLEdBQVdDLHFCQUF2QztBQUNBLE1BQUlDLEtBQUssR0FBR0wsR0FBRyxDQUFDRyxJQUFKLEdBQVdFLEtBQXZCO0FBQ0FZLEVBQUFBLGlCQUFpQixDQUFDN0QsYUFBRCxFQUFnQmdELHFCQUFoQixFQUF1Q0MsS0FBdkMsQ0FBakI7O0FBRUEsV0FBU1ksaUJBQVQsQ0FBMkI3RCxhQUEzQixFQUEwQ2dELHFCQUExQyxFQUFpRUMsS0FBakUsRUFBd0U7QUFDcEU5QyxJQUFBQSxZQUFZLENBQUNxRCxPQUFiLENBQXFCLGVBQXJCLEVBQXNDdkQsSUFBSSxDQUFDd0QsU0FBTCxDQUFlekQsYUFBZixDQUF0QztBQUNBRyxJQUFBQSxZQUFZLENBQUNxRCxPQUFiLENBQXFCLE9BQXJCLEVBQThCUCxLQUE5QjtBQUNBOUMsSUFBQUEsWUFBWSxDQUFDcUQsT0FBYixDQUFxQix1QkFBckIsRUFBOENSLHFCQUE5QztBQUNIO0FBQ0osQ0FaRDs7Ozs7Ozs7Ozs7QUNEQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYnBhY2twcm9qZWN0Ly4vc3JjL0FkbWluX09yZGVyTGlzdFZpZXcvZ2V0QW5kVXBkYXRlRmlyZWJhc2VEYXRhLmpzIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0Ly4vc3JjL0luZGV4X1BhZ2UvYWRkRGF0YVRvTG9jYWxTdG9yYWdlRnJvbUZpcmViYXNlLmpzIiwid2VicGFjazovL3dlYnBhY2twcm9qZWN0Ly4vc3JjL0FkbWluX09yZGVyTGlzdFZpZXcvb3JkZXJMaXN0U3R5bGluZy5jc3M/NzhkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkYXRhYmFzZSB9IGZyb20gJy4uL0luZGV4X1BhZ2UvZmlyZVN0b3JlQWNjZXNzLmpzJztcclxuaW1wb3J0ICcuL29yZGVyTGlzdFN0eWxpbmcuY3NzJztcclxuaW1wb3J0ICcuLi9JbmRleF9QYWdlL2FkZERhdGFUb0xvY2FsU3RvcmFnZUZyb21GaXJlYmFzZSc7XHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvL09uIFBhZ2UgTG9hZCBtYWtlIHRoZSBDaGVja2JveGVzIHRydWUgYnkgZGVmYXVsdFxyXG4gICAgc2hvd09yZGVyc0xpc3QoKTtcclxuXHJcbiAgICAvL01ha2luZyB0aGUgUGFyZW50IENoZWNrQm94IHRvZ2dsZSBiZXR3ZWVuIGNoZWNrZWQgYW5kIHVuY2hlY2tlZCBiYXNlZCBvblxyXG4gICAgLy93aGV0aGVyIGFsbCB0aGUgY2hpbGQgY2hlY2tib3hlcyBhcmUgY2hlY2tlZCBvciBub3RcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGxldCB0Ym9keVF1ZXVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKTtcclxuICAgICAgICBmb3IgKGxldCBrZXkgPSAwOyBrZXkgPCB0Ym9keVF1ZXVlLmxlbmd0aDsga2V5KyspIHtcclxuICAgICAgICAgICAgdGJvZHlRdWV1ZVtrZXldLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50Q2hlY2tCb3hJZCA9IGV2ZW50LnRhcmdldC5uYW1lICsgXCJDaGVja0JveFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnRDaGVja0JveElkKS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZsYWcgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoZXZlbnQudGFyZ2V0Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcnMuZm9yRWFjaCgob3JkZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3JkZXIuaWQgJiYgZmxhZyAhPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyLmNoZWNrZWQgPT0gdHJ1ZSkgZmxhZyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBmbGFnID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbGFnID09IDApIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudENoZWNrQm94SWQpLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgMzAwMCk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzaG93T3JkZXJzTGlzdCgpIHtcclxuICAgIGxldCBpblRoZVF1ZXVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpblRoZVF1ZXVlXCIpO1xyXG4gICAgbGV0IGJlaW5nTWl4ZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJlaW5nTWl4ZWRcIik7XHJcbiAgICBsZXQgcmVhZHlUb0NvbGxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlYWR5VG9Db2xsZWN0XCIpO1xyXG4gICAgaW5UaGVRdWV1ZS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIGJlaW5nTWl4ZWQuY2hlY2tlZCA9IHRydWU7XHJcbiAgICByZWFkeVRvQ29sbGVjdC5jaGVja2VkID0gdHJ1ZTtcclxuXHJcblxyXG4gICAgaGFuZGxlRGF0YShpblRoZVF1ZXVlKSgpO1xyXG4gICAgaGFuZGxlRGF0YShiZWluZ01peGVkKSgpO1xyXG4gICAgaGFuZGxlRGF0YShyZWFkeVRvQ29sbGVjdCkoKTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuY29uc3Qgc2hvd0NoZWNrQm94ZXMgPSB0b2dnbGVDaGVja0JveGVzKCk7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0UXVldWVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNob3dDaGVja0JveGVzKTtcclxuXHJcbi8vVG9nZ2xlcyBiZXR3ZWVuIHNob3dpbmcgYW5kIGhpZGluZyB0aGUgY2hlY2tib3hlc1xyXG5mdW5jdGlvbiB0b2dnbGVDaGVja0JveGVzKCkge1xyXG4gICAgbGV0IHNob3cgPSB0cnVlO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxldCBjaGVja0JveFF1ZXVlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hlY2tCb3hRdWV1ZXNcIik7XHJcbiAgICAgICAgaWYgKHNob3cpIHtcclxuICAgICAgICAgICAgY2hlY2tCb3hRdWV1ZXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICAgICAgc2hvdyA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoZWNrQm94UXVldWVzLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgc2hvdyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vL1NlbGVjdCBhbGwgQ2hlY2tCb3hlcyBvZiB0aGUgcmVzcGVjdGl2ZSBxdWV1ZSBieSBjbGlja2luZyBvbmUgbWFpbiBDaGVja0JveFxyXG5mdW5jdGlvbiBjaGVja0FsbChjaGVja2JveCkge1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBpZiAoY2hlY2tib3guY2hlY2tlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBsZXQgcXVldWUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShjaGVja2JveC5uYW1lKTtcclxuICAgICAgICAgICAgcXVldWUuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBxdWV1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKGNoZWNrYm94Lm5hbWUpO1xyXG4gICAgICAgICAgICBxdWV1ZS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLy9HZXQgRGF0YSBmcm9tIEZpcmViYXNlIGFuZCBzdG9yZSBpdCBpbiB5b3VyIHRhYmxlXHJcbmZ1bmN0aW9uIGhhbmRsZURhdGEoY2hlY2tib3gpIHtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgdmFyIGN1c3RvbWVyc0RhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY3VzdG9tZXJzRGF0YVwiKSk7XHJcbiAgICAgICAgdmFyIGN1c3RvbWVyT3JkZXJzID0gY3VzdG9tZXJzRGF0YVswXTtcclxuICAgICAgICB2YXIgb3JkZXJRdWV1ZSA9IGN1c3RvbWVyc0RhdGFbMV07XHJcbiAgICAgICAgdmFyIGN1c3RvbWVySURzID0gT2JqZWN0LmtleXMoY3VzdG9tZXJPcmRlcnMpO1xyXG4gICAgICAgIC8vSWYgQ2hlY2tlZCBcclxuICAgICAgICBpZiAoY2hlY2tib3guY2hlY2tlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8vVGhlIFF1ZXVlIGluIHdoaWNoIHRoZSBkYXRhIGJlbG9uZyB0b1xyXG4gICAgICAgICAgICB2YXIgcXVldWUgPSBjaGVja2JveC5pZDtcclxuXHJcbiAgICAgICAgICAgIC8vQ3JlYXRlIGEgUm93IHJlcHJlc2VudGluZyB0aGUgQ3VzdG9tZXIgRGF0YSBpbiBwYXJ0aWN1bGFyIFF1ZXVlXHJcbiAgICAgICAgICAgIHZhciBjdXN0b21lcnNRdWV1ZURhdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGJvZHlcIik7XHJcbiAgICAgICAgICAgIGN1c3RvbWVyc1F1ZXVlRGF0YS5pZCA9IHF1ZXVlICsgXCJSb3dcIjtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvcmRlcnNMaXN0XCIpLmFwcGVuZENoaWxkKGN1c3RvbWVyc1F1ZXVlRGF0YSk7XHJcblxyXG4gICAgICAgICAgICAvL0NyZWF0aW5nIGEgdGFibGUgY2VsbCByZXByZXNlbnRpbmcgdGhlIFF1ZXVlIE5hbWUgYW5kIGEgQ2hlY2tib3hcclxuICAgICAgICAgICAgdmFyIHF1ZXVlTmFtZVJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgICAgICAgY3VzdG9tZXJzUXVldWVEYXRhLmFwcGVuZENoaWxkKHF1ZXVlTmFtZVJvdyk7XHJcbiAgICAgICAgICAgIHZhciBxdWV1ZU5hbWVDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xyXG4gICAgICAgICAgICBxdWV1ZU5hbWVSb3cuYXBwZW5kQ2hpbGQocXVldWVOYW1lQ2VsbCk7XHJcbiAgICAgICAgICAgIHF1ZXVlTmFtZUNlbGwuY29sU3BhbiA9IDQ7XHJcbiAgICAgICAgICAgIC8vTGFiZWxcclxuICAgICAgICAgICAgdmFyIHF1ZXVlTmFtZUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkxBQkVMXCIpO1xyXG4gICAgICAgICAgICBxdWV1ZU5hbWVMYWJlbC5odG1sRm9yID0gcXVldWUgKyBcIkNoZWNrQm94XCI7XHJcbiAgICAgICAgICAgIGlmIChxdWV1ZSA9PSBcImluVGhlUXVldWVcIikgcXVldWVOYW1lTGFiZWwuaW5uZXJIVE1MID0gXCJJbiBUaGUgUXVldWUgXCI7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHF1ZXVlID09IFwiYmVpbmdNaXhlZFwiKSBxdWV1ZU5hbWVMYWJlbC5pbm5lckhUTUwgPSBcIkJlaW5nIE1peGVkIFwiO1xyXG4gICAgICAgICAgICBlbHNlIHF1ZXVlTmFtZUxhYmVsLmlubmVySFRNTCA9IFwiUmVhZHkgVG8gQ29sbGVjdCBcIjtcclxuICAgICAgICAgICAgcXVldWVOYW1lQ2VsbC5hcHBlbmRDaGlsZChxdWV1ZU5hbWVMYWJlbCk7XHJcbiAgICAgICAgICAgIC8vQ2hlY2tCb3hcclxuICAgICAgICAgICAgdmFyIHF1ZXVlTmFtZUNoZWNrQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICBxdWV1ZU5hbWVDaGVja0JveC50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgICAgICBxdWV1ZU5hbWVDaGVja0JveC5uYW1lID0gcXVldWU7XHJcbiAgICAgICAgICAgIHF1ZXVlTmFtZUNoZWNrQm94LmlkID0gcXVldWUgKyBcIkNoZWNrQm94XCI7XHJcbiAgICAgICAgICAgIHF1ZXVlTmFtZUNoZWNrQm94LnN0eWxlLnZlcnRpY2FsQWxpZ24gPSBcIm1pZGRsZVwiO1xyXG4gICAgICAgICAgICBsZXQgY2hlY2tBbGxGdW5jdGlvbiA9IGNoZWNrQWxsKHF1ZXVlTmFtZUNoZWNrQm94KTtcclxuICAgICAgICAgICAgcXVldWVOYW1lQ2hlY2tCb3guYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBjaGVja0FsbEZ1bmN0aW9uKTtcclxuICAgICAgICAgICAgcXVldWVOYW1lQ2VsbC5hcHBlbmRDaGlsZChxdWV1ZU5hbWVDaGVja0JveCk7XHJcblxyXG4gICAgICAgICAgICAvL0NyZWF0ZSBhIFRhYmxlIFJvdyBmb3IgZWFjaCBDdXN0b21lciBPcmRlciBpbiBhIHNwZWNpZmljIFF1ZXVlXHJcbiAgICAgICAgICAgIGN1c3RvbWVySURzLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcmRlclF1ZXVlW2lkXSA9PT0gY2hlY2tib3guaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0dldCBDdXRvbWVyIE5hbWUgYW5kIE9yZGVyIGJhc2VkIG9uIGhpcyBJRFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXN0b21lckRhdGEgPSBjdXN0b21lck9yZGVyc1tpZF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1c3RvbWVyRGF0YUFycmF5ID0gY3VzdG9tZXJEYXRhLnNwbGl0KFwiJFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VzdG9tZXJOYW1lID0gY3VzdG9tZXJEYXRhQXJyYXlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJldmVyYWdlID0gY3VzdG9tZXJEYXRhQXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ST1dcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VzdG9tZXJSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93SUQgPSBvcmRlclF1ZXVlW2lkXSArIFwiUm93XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocm93SUQpLmFwcGVuZENoaWxkKGN1c3RvbWVyUm93KTtcclxuICAgICAgICAgICAgICAgICAgICAvL0lEXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIElEID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIElELmlubmVySFRNTCA9IGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyUm93LmFwcGVuZENoaWxkKElEKTtcclxuICAgICAgICAgICAgICAgICAgICAvL05hbWVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lLmlubmVySFRNTCA9IGN1c3RvbWVyTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21lclJvdy5hcHBlbmRDaGlsZChuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAvL0JldmVyYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyaW5rLmlubmVySFRNTCA9IGJldmVyYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyUm93LmFwcGVuZENoaWxkKGRyaW5rKTtcclxuICAgICAgICAgICAgICAgICAgICAvL0NoZWNrQm94XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdERhdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0RGF0YS5pZCA9IGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyUm93LmFwcGVuZENoaWxkKHNlbGVjdERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dENoZWNrQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0Q2hlY2tCb3gudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dENoZWNrQm94Lm5hbWUgPSBvcmRlclF1ZXVlW2lkXTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3REYXRhLmFwcGVuZENoaWxkKGlucHV0Q2hlY2tCb3gpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vSWYgVW5jaGVja2VkXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByb3dJRCA9IGNoZWNrYm94LmlkICsgXCJSb3dcIjtcclxuICAgICAgICAgICAgdmFyIG9yZGVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHJvd0lEKTtcclxuICAgICAgICAgICAgb3JkZXJzLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBjb3VudCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmNvbnN0IGluVGhlUXVldWVGdW5jdGlvbiA9IGhhbmRsZURhdGEoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpblRoZVF1ZXVlXCIpKTtcclxuY29uc3QgYmVpbmdNaXhlZEZ1bmN0aW9uID0gaGFuZGxlRGF0YShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJlaW5nTWl4ZWRcIikpO1xyXG5jb25zdCByZWFkeVRvQ29sbGVjdEZ1bmN0aW9uID0gaGFuZGxlRGF0YShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlYWR5VG9Db2xsZWN0XCIpKTtcclxuXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5UaGVRdWV1ZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGluVGhlUXVldWVGdW5jdGlvbik7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmVpbmdNaXhlZFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGJlaW5nTWl4ZWRGdW5jdGlvbik7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVhZHlUb0NvbGxlY3RcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCByZWFkeVRvQ29sbGVjdEZ1bmN0aW9uKTtcclxuXHJcblxyXG5cclxuLy8gU2hpZnQgYWxsIHRoZSBjaGVja2VkIG9yZGVycyB0byB0aGUgc2VsZWN0ZWQgUXVldWVcclxuZnVuY3Rpb24gc2hpZnRUb1NlbGVjdGVkUXVldWUoKSB7XHJcbiAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKFwiY3VzdG9tZXJzXCIpLmdldCgpLnRoZW4oKHNuYXBzaG90KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZG9jID0gc25hcHNob3QuZG9jc1swXTtcclxuICAgICAgICBsZXQgZG9jSWQgPSBkb2MuaWQ7XHJcbiAgICAgICAgbGV0IGN1c3RvbWVyc0RhdGEgPSBkb2MuZGF0YSgpLmN1c3RvbWVyc0RhdGE7XHJcbiAgICAgICAgbGV0IGN1c3RvbWVyT3JkZXJzID0gY3VzdG9tZXJzRGF0YVswXTtcclxuICAgICAgICBsZXQgb3JkZXJRdWV1ZSA9IGN1c3RvbWVyc0RhdGFbMV07XHJcbiAgICAgICAgbGV0IGN1cnJlbnRDdXN0b21lcnNDb3VudCA9IGRvYy5kYXRhKCkuY3VycmVudEN1c3RvbWVyc0NvdW50O1xyXG4gICAgICAgIGxldCBpbmRleCA9IGRvYy5kYXRhKCkuaW5kZXg7XHJcblxyXG4gICAgICAgIGxldCBxdWV1ZU5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNoaWZ0VG9RdWV1ZVwiKS52YWx1ZTtcclxuICAgICAgICBsZXQgc2VsZWN0ZWRPcmRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXTpjaGVja2VkXCIpO1xyXG5cclxuICAgICAgICBzZWxlY3RlZE9yZGVycy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnRFbGVtZW50LmlkICYmIHF1ZXVlTmFtZSAhPSBcIi0tU2hpZnQgVG8gUXVldWUtLVwiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VzdG9tZXJJZCA9IGVsZW1lbnQucGFyZW50RWxlbWVudC5pZDtcclxuICAgICAgICAgICAgICAgIGN1c3RvbWVySWQgPSBwYXJzZUludChjdXN0b21lcklkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocXVldWVOYW1lICE9IFwiZGVsZXRlT3JkZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVXBkYXRlIHRoZSBjdXN0b21lcklkIHdpdGggbmV3IHF1ZXVlTmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvcmRlclF1ZXVlW2N1c3RvbWVySWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyUXVldWVbaW5kZXhdID0gcXVldWVOYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL0RlbGV0ZSB0aGUgY3VzdG9tZXJEYXRhIGFuZCB1cGRhdGUgdG8gbmV3IG9uZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXN0b21lckRhdGEgPSBjdXN0b21lck9yZGVyc1tjdXN0b21lcklkXTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3VzdG9tZXJPcmRlcnNbY3VzdG9tZXJJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJPcmRlcnNbaW5kZXhdID0gY3VzdG9tZXJEYXRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImN1c3RvbWVyc0RhdGFcIiwgSlNPTi5zdHJpbmdpZnkoY3VzdG9tZXJzRGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVXBkYXRlIHRoZSBpbmRleCBjb3VudCBpbiBGaXJlc3RvcmVcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJpbmRleFwiLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJhc2UuY29sbGVjdGlvbihcImN1c3RvbWVyc1wiKS5kb2MoZG9jSWQpLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyc0RhdGE6IGN1c3RvbWVyc0RhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9EZWxldGUgdGhlIGN1c3RvbWVyJ3MgZGF0YSBmcm9tIEZpcmVzdG9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdXN0b21lck9yZGVyc1tjdXN0b21lcklkXTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3JkZXJRdWV1ZVtjdXN0b21lcklkXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjdXN0b21lcnNEYXRhXCIsIEpTT04uc3RyaW5naWZ5KGN1c3RvbWVyc0RhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q3VzdG9tZXJzQ291bnQtLTtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnRDdXN0b21lcnNDb3VudFwiLCBjdXJyZW50Q3VzdG9tZXJzQ291bnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkYXRhYmFzZS5jb2xsZWN0aW9uKFwiY3VzdG9tZXJzXCIpLmRvYyhkb2NJZCkudXBkYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJzRGF0YTogY3VzdG9tZXJzRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEN1c3RvbWVyc0NvdW50OiBjdXJyZW50Q3VzdG9tZXJzQ291bnRcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXBkYXRlTG9jYWxTdG9yYWdlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzaGlmdFRvU2VsZWN0ZWRRdWV1ZSk7IiwiaW1wb3J0IHsgZGF0YWJhc2UgfSBmcm9tICcuLi9JbmRleF9QYWdlL2ZpcmVTdG9yZUFjY2Vzcy5qcyc7XHJcbmRhdGFiYXNlLmNvbGxlY3Rpb24oXCJjdXN0b21lcnNcIikuZ2V0KCkudGhlbigoc25hcHNob3QpID0+IHtcclxuICAgIGNvbnN0IGRvYyA9IHNuYXBzaG90LmRvY3NbMF07XHJcbiAgICBsZXQgY3VzdG9tZXJzRGF0YSA9IGRvYy5kYXRhKCkuY3VzdG9tZXJzRGF0YTtcclxuICAgIGxldCBjdXJyZW50Q3VzdG9tZXJzQ291bnQgPSBkb2MuZGF0YSgpLmN1cnJlbnRDdXN0b21lcnNDb3VudDtcclxuICAgIGxldCBpbmRleCA9IGRvYy5kYXRhKCkuaW5kZXg7XHJcbiAgICBhZGRUb0xvY2FsU3RvcmFnZShjdXN0b21lcnNEYXRhLCBjdXJyZW50Q3VzdG9tZXJzQ291bnQsIGluZGV4KTtcclxuXHJcbiAgICBmdW5jdGlvbiBhZGRUb0xvY2FsU3RvcmFnZShjdXN0b21lcnNEYXRhLCBjdXJyZW50Q3VzdG9tZXJzQ291bnQsIGluZGV4KSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjdXN0b21lcnNEYXRhXCIsIEpTT04uc3RyaW5naWZ5KGN1c3RvbWVyc0RhdGEpKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImluZGV4XCIsIGluZGV4KTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnRDdXN0b21lcnNDb3VudFwiLCBjdXJyZW50Q3VzdG9tZXJzQ291bnQpO1xyXG4gICAgfVxyXG59KTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOlsiZGF0YWJhc2UiLCJ3aW5kb3ciLCJvbmxvYWQiLCJzaG93T3JkZXJzTGlzdCIsInNldFRpbWVvdXQiLCJ0Ym9keVF1ZXVlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImtleSIsImxlbmd0aCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhcmdldCIsInBhcmVudEVsZW1lbnQiLCJpZCIsInBhcmVudENoZWNrQm94SWQiLCJuYW1lIiwiY2hlY2tlZCIsImdldEVsZW1lbnRCeUlkIiwiZmxhZyIsIm9yZGVycyIsImdldEVsZW1lbnRzQnlOYW1lIiwiZm9yRWFjaCIsIm9yZGVyIiwiaW5UaGVRdWV1ZSIsImJlaW5nTWl4ZWQiLCJyZWFkeVRvQ29sbGVjdCIsImhhbmRsZURhdGEiLCJzaG93Q2hlY2tCb3hlcyIsInRvZ2dsZUNoZWNrQm94ZXMiLCJzaG93IiwiY2hlY2tCb3hRdWV1ZXMiLCJzdHlsZSIsImRpc3BsYXkiLCJjaGVja0FsbCIsImNoZWNrYm94IiwicXVldWUiLCJlbGVtZW50IiwiY3VzdG9tZXJzRGF0YSIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjdXN0b21lck9yZGVycyIsIm9yZGVyUXVldWUiLCJjdXN0b21lcklEcyIsIk9iamVjdCIsImtleXMiLCJjdXN0b21lcnNRdWV1ZURhdGEiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJxdWV1ZU5hbWVSb3ciLCJxdWV1ZU5hbWVDZWxsIiwiY29sU3BhbiIsInF1ZXVlTmFtZUxhYmVsIiwiaHRtbEZvciIsImlubmVySFRNTCIsInF1ZXVlTmFtZUNoZWNrQm94IiwidHlwZSIsInZlcnRpY2FsQWxpZ24iLCJjaGVja0FsbEZ1bmN0aW9uIiwiY3VzdG9tZXJEYXRhIiwiY3VzdG9tZXJEYXRhQXJyYXkiLCJzcGxpdCIsImN1c3RvbWVyTmFtZSIsImJldmVyYWdlIiwiY3VzdG9tZXJSb3ciLCJyb3dJRCIsIklEIiwiZHJpbmsiLCJzZWxlY3REYXRhIiwiaW5wdXRDaGVja0JveCIsInJlbW92ZSIsImNvdW50IiwiaW5UaGVRdWV1ZUZ1bmN0aW9uIiwiYmVpbmdNaXhlZEZ1bmN0aW9uIiwicmVhZHlUb0NvbGxlY3RGdW5jdGlvbiIsInNoaWZ0VG9TZWxlY3RlZFF1ZXVlIiwiY29sbGVjdGlvbiIsImdldCIsInRoZW4iLCJzbmFwc2hvdCIsImRvYyIsImRvY3MiLCJkb2NJZCIsImRhdGEiLCJjdXJyZW50Q3VzdG9tZXJzQ291bnQiLCJpbmRleCIsInF1ZXVlTmFtZSIsInZhbHVlIiwic2VsZWN0ZWRPcmRlcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY3VzdG9tZXJJZCIsInBhcnNlSW50Iiwic2V0SXRlbSIsInN0cmluZ2lmeSIsInVwZGF0ZSIsImxvY2F0aW9uIiwicmVsb2FkIiwiYWRkVG9Mb2NhbFN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9