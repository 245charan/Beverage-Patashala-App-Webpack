(self["webpackChunkwebpackproject"] = self["webpackChunkwebpackproject"] || []).push([["getAndUpdateFirebaseData"],{

/***/ "./src/Admin_OrderListView/getAndUpdateFirebaseData.js":
/*!*************************************************************!*\
  !*** ./src/Admin_OrderListView/getAndUpdateFirebaseData.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Index_Page/fireStoreAccess.js */ "./src/Index_Page/fireStoreAccess.js");
/* harmony import */ var _orderListStyling_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orderListStyling.css */ "./src/Admin_OrderListView/orderListStyling.css");
/* harmony import */ var _Index_Page_addDataToLocalStorageFromFirebase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Index_Page/addDataToLocalStorageFromFirebase */ "./src/Index_Page/addDataToLocalStorageFromFirebase.js");




window.onload = function () {
  //On Page Load make the Checkboxes true by default
  showOrdersList(); //Making the Parent CheckBox toggle between checked and unchecked based on
  //whether all the child checkboxes are checked or not

  setTimeout(function () {
    var tbodyQueue = document.getElementsByTagName("tbody");

    for (var key = 0; key < tbodyQueue.length; key++) {
      tbodyQueue[key].addEventListener("change", function (event) {
        if (event.target.parentElement.id) {
          var parentCheckBoxId = event.target.name + "CheckBox";

          if (event.target.checked == false) {
            document.getElementById(parentCheckBoxId).checked = false;
          } else {
            var flag = 0;
            var orders = document.getElementsByName(event.target.name);
            orders.forEach(function (order) {
              if (!order.id && flag != 1) {
                if (order.checked == true) flag = 0;else flag = 1;
              }
            });
            if (flag == 0) document.getElementById(parentCheckBoxId).checked = true;
          }
        }
      });
    }
  }, 3000);
};

function showOrdersList() {
  var inTheQueue = document.getElementById("inTheQueue");
  var beingMixed = document.getElementById("beingMixed");
  var readyToCollect = document.getElementById("readyToCollect");
  inTheQueue.checked = true;
  beingMixed.checked = true;
  readyToCollect.checked = true;
  handleData(inTheQueue)();
  handleData(beingMixed)();
  handleData(readyToCollect)();
}

var showCheckBoxes = toggleCheckBoxes();
document.getElementById("selectQueue").addEventListener("click", showCheckBoxes); //Toggles between showing and hiding the checkboxes

function toggleCheckBoxes() {
  var show = true;
  return function () {
    var checkBoxQueues = document.getElementById("checkBoxQueues");

    if (show) {
      checkBoxQueues.style.display = "block";
      show = false;
    } else {
      checkBoxQueues.style.display = "none";
      show = true;
    }
  };
} //Select all CheckBoxes of the respective queue by clicking one main CheckBox


function checkAll(checkbox) {
  return function () {
    if (checkbox.checked === true) {
      var queue = document.getElementsByName(checkbox.name);
      queue.forEach(function (element) {
        element.checked = true;
      });
    } else {
      var _queue = document.getElementsByName(checkbox.name);

      _queue.forEach(function (element) {
        element.checked = false;
      });
    }
  };
} //Get Data from Firebase and store it in your table


function handleData(checkbox) {
  return function () {
    var customersData = JSON.parse(localStorage.getItem("customersData"));
    var customerOrders = customersData[0];
    var orderQueue = customersData[1];
    var customerIDs = Object.keys(customerOrders); //If Checked 

    if (checkbox.checked == true) {
      //The Queue in which the data belong to
      var queue = checkbox.id; //Create a Row representing the Customer Data in particular Queue

      var customersQueueData = document.createElement("tbody");
      customersQueueData.id = queue + "Row";
      document.getElementById("ordersList").appendChild(customersQueueData); //Creating a table cell representing the Queue Name and a Checkbox

      var queueNameRow = document.createElement("tr");
      customersQueueData.appendChild(queueNameRow);
      var queueNameCell = document.createElement("td");
      queueNameRow.appendChild(queueNameCell);
      queueNameCell.colSpan = 4; //Label

      var queueNameLabel = document.createElement("LABEL");
      queueNameLabel.htmlFor = queue + "CheckBox";
      if (queue == "inTheQueue") queueNameLabel.innerHTML = "In The Queue ";else if (queue == "beingMixed") queueNameLabel.innerHTML = "Being Mixed ";else queueNameLabel.innerHTML = "Ready To Collect ";
      queueNameCell.appendChild(queueNameLabel); //CheckBox

      var queueNameCheckBox = document.createElement("input");
      queueNameCheckBox.type = "checkbox";
      queueNameCheckBox.name = queue;
      queueNameCheckBox.id = queue + "CheckBox";
      queueNameCheckBox.style.verticalAlign = "middle";
      var checkAllFunction = checkAll(queueNameCheckBox);
      queueNameCheckBox.addEventListener("change", checkAllFunction);
      queueNameCell.appendChild(queueNameCheckBox); //Create a Table Row for each Customer Order in a specific Queue

      customerIDs.forEach(function (id) {
        if (orderQueue[id] === checkbox.id) {
          //Get Cutomer Name and Order based on his ID
          var customerData = customerOrders[id];
          var customerDataArray = customerData.split("$");
          var customerName = customerDataArray[0];
          var beverage = customerDataArray[1]; //ROW

          var customerRow = document.createElement("tr");
          rowID = orderQueue[id] + "Row";
          document.getElementById(rowID).appendChild(customerRow); //ID

          var ID = document.createElement("td");
          ID.innerHTML = id;
          customerRow.appendChild(ID); //Name

          var name = document.createElement("td");
          name.innerHTML = customerName;
          customerRow.appendChild(name); //Beverage

          var drink = document.createElement("td");
          drink.innerHTML = beverage;
          customerRow.appendChild(drink); //CheckBox

          var selectData = document.createElement("td");
          selectData.id = id;
          customerRow.appendChild(selectData);
          var inputCheckBox = document.createElement("input");
          inputCheckBox.type = "checkbox";
          inputCheckBox.name = orderQueue[id];
          selectData.appendChild(inputCheckBox);
        }
      });
    } //If Unchecked
    else {
        var rowID = checkbox.id + "Row";
        var orders = document.getElementById(rowID);
        orders.remove();
        count = 0;
      }
  };
}

var inTheQueueFunction = handleData(document.getElementById("inTheQueue"));
var beingMixedFunction = handleData(document.getElementById("beingMixed"));
var readyToCollectFunction = handleData(document.getElementById("readyToCollect"));
document.getElementById("inTheQueue").addEventListener("change", inTheQueueFunction);
document.getElementById("beingMixed").addEventListener("change", beingMixedFunction);
document.getElementById("readyToCollect").addEventListener("change", readyToCollectFunction); // Shift all the checked orders to the selected Queue

function shiftToSelectedQueue() {
  _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").get().then(function (snapshot) {
    var doc = snapshot.docs[0];
    var docId = doc.id;
    var customersData = doc.data().customersData;
    var customerOrders = customersData[0];
    var orderQueue = customersData[1];
    var currentCustomersCount = doc.data().currentCustomersCount;
    var index = doc.data().index;
    var queueName = document.getElementById("shiftToQueue").value;
    var selectedOrders = document.querySelectorAll("input[type='checkbox']:checked");
    selectedOrders.forEach(function (element) {
      if (element.parentElement.id && queueName != "--Shift To Queue--") {
        var customerId = element.parentElement.id;
        customerId = parseInt(customerId);

        if (queueName != "deleteOrder") {
          //Update the customerId with new queueName
          delete orderQueue[customerId];
          orderQueue[index] = queueName; //Delete the customerData and update to new one

          var customerData = customerOrders[customerId];
          delete customerOrders[customerId];
          customerOrders[index] = customerData;
          localStorage.setItem("customersData", JSON.stringify(customersData)); //Update the index count in Firestore

          index++;
          localStorage.setItem("index", index);
          _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").doc(docId).update({
            customersData: customersData,
            index: index
          }).then(function () {
            location.reload();
          });
        } else {
          //Delete the customer's data from Firestore
          delete customerOrders[customerId];
          delete orderQueue[customerId];
          localStorage.setItem("customersData", JSON.stringify(customersData));
          currentCustomersCount--;
          localStorage.setItem("currentCustomersCount", currentCustomersCount);
          _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").doc(docId).update({
            customersData: customersData,
            currentCustomersCount: currentCustomersCount
          }).then(function () {
            location.reload();
          });
        }
      }
    });
  });
}

document.getElementById("updateLocalStorage").addEventListener("click", shiftToSelectedQueue);

/***/ }),

/***/ "./src/Index_Page/addDataToLocalStorageFromFirebase.js":
/*!*************************************************************!*\
  !*** ./src/Index_Page/addDataToLocalStorageFromFirebase.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Index_Page/fireStoreAccess.js */ "./src/Index_Page/fireStoreAccess.js");

_Index_Page_fireStoreAccess_js__WEBPACK_IMPORTED_MODULE_0__.database.collection("customers").get().then(function (snapshot) {
  var doc = snapshot.docs[0];
  var customersData = doc.data().customersData;
  var currentCustomersCount = doc.data().currentCustomersCount;
  var index = doc.data().index;
  addToLocalStorage(customersData, currentCustomersCount, index);

  function addToLocalStorage(customersData, currentCustomersCount, index) {
    localStorage.setItem("customersData", JSON.stringify(customersData));
    localStorage.setItem("index", index);
    localStorage.setItem("currentCustomersCount", currentCustomersCount);
  }
});

/***/ }),

/***/ "./src/Admin_OrderListView/orderListStyling.css":
/*!******************************************************!*\
  !*** ./src/Admin_OrderListView/orderListStyling.css ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

},
0,[["./src/Admin_OrderListView/getAndUpdateFirebaseData.js","runtime","vendors-node_modules_firebase_app_dist_index_esm_js-node_modules_firebase_firestore_dist_inde-439294","sharedFireStoreAccess"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,